class Tag:
    def __init__(self, tag, is_single=False, klass=None, **kwargs):
        self.tag = tag
        self.text = ""
        self.is_single = is_single
        self.heirs = []
        self.dictionary = {}


        if klass is not None:
            self.dictionary["class"] = " ".join(klass)

        for attr, value in kwargs.items():
            if "_" in attr:
                attr = attr.replace("_", "-")
            self.dictionary[attr] = value

    def __enter__(self, *args, **kwargs):
        return self

    def __exit__(self, *args, **kwargs):
        pass

    def __iadd__(self, other):
        self.heirs.append(other)
        return self

    def __str__(self):
        attrs = []
        for attribute, value in self.dictionary.items():
            attrs.append('%s="%s"' % (attribute, value))
        attrs = " ".join(attrs)

        if self.heirs:
            opening = "<{tag} {attrs}>".format(tag=self.tag, attrs=attrs)
            if self.text:
                internal = "%s" % self.text
            else:
                internal = ""
            for heir in self.heirs:
                internal += str(heir)
            ending = "</%s>" % self.tag
            return opening + internal + ending
        else:
            if self.is_single:
                return "<{tag} {attrs}/>".format(tag=self.tag, attrs=attrs)
            else:
                return "<{tag} {attrs}>{text}</{tag}>".format(
                    tag=self.tag, attrs=attrs, text=self.text
                )


class HTML:
    def __init__(self, output):
        self.output = output
        self.heirs = []

    def __iadd__(self, other):
        self.heirs.append(other)
        return self

    def __enter__(self):
        return self

    def __exit__(self, *args, **kwargs):
        if self.output is not None:
            with open(self.output) as fp:
                print(str(self))
        else:
            print(self)

    def __str__(self):
        html = "<html>\n"
        for heir in self.heirs:
            html += str(heir)
        html += "\n</html>"
        return html


class TopLevelTag:
    def __init__(self, tag, **kwargs):
        self.tag = tag
        self.heirs = []


    def __enter__(self):
        return self

    def __exit__(self, *args, **kwargs):
        pass

    def __iadd__(self, other):
        self.heirs.append(other)
        return self

    def __str__(self):
        html = "<%s>\n" % self.tag
        for heir in self.heirs:
            html += str(heir)
        html += "\n</%s>" % self.tag
        return html


if __name__ == "__main__":
    def start():
        with HTML(output=None) as doc:
            with TopLevelTag("head") as head:
                with Tag("title") as title:
                    title.text = "hello"
                    head += title
                doc += head

            with TopLevelTag("body") as body:
                with Tag("h1", klass=("main-text",)) as h1:
                    h1.text = "Test"
                    body += h1

                with Tag("div", klass=("container", "container-fluid"), id="lead") as div:
                    with Tag("p") as paragraph:
                        paragraph.text = "another test"
                        div += paragraph

                    with Tag("img", is_single=True, src="/icon.png") as img:
                        div += img

                    body += div

                doc += body


start()
